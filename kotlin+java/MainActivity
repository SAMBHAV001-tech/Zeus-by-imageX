package com.example.imagex;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.net.Uri;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.provider.Settings;
import android.text.Editable;
import android.text.TextWatcher;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;
import androidx.core.graphics.Insets;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class MainActivity extends AppCompatActivity {

    private static final int PERMISSION_REQUEST_CODE = 101;
    private static final int MANAGE_STORAGE_PERMISSION_REQUEST_CODE = 102;
    private static final String[] PERMISSIONS_STORAGE_OLD = {
            Manifest.permission.WRITE_EXTERNAL_STORAGE,
            Manifest.permission.READ_EXTERNAL_STORAGE
    };
    private static final String[] PERMISSIONS_STORAGE_NEW = {
            Manifest.permission.READ_MEDIA_IMAGES
    };

    private Button btnCreateFolder;
    private LinearLayout folderLayout;
    private EditText searchEditText;
    private ImageButton searchButton;
    private TextView noResultsTextView;
    private List<File> folders = new ArrayList<>();

    private static final String APP_FOLDER_NAME = "ImageX";

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            getWindow().setDecorFitsSystemWindows(false);
        }

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        initializeViews();
        verifyStoragePermissions();
        forceRescanAllFolders(); // Added this line
    }

    private void initializeViews() {
        btnCreateFolder = findViewById(R.id.btnCreateFolder);
        folderLayout = findViewById(R.id.folderLayout);
        searchEditText = findViewById(R.id.searchEditText);
        searchButton = findViewById(R.id.searchButton);
        noResultsTextView = findViewById(R.id.noResultsTextView);

        searchEditText.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                filterFolders(s.toString());
            }

            @Override
            public void afterTextChanged(Editable s) {}
        });

        btnCreateFolder.setOnClickListener(v -> createFolder());
    }

    private void verifyStoragePermissions() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            if (!Environment.isExternalStorageManager()) {
                requestManageStoragePermission();
            } else {
                loadFolders();
            }
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_MEDIA_IMAGES)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, PERMISSIONS_STORAGE_NEW, PERMISSION_REQUEST_CODE);
            } else {
                loadFolders();
            }
        } else {
            if (ContextCompat.checkSelfPermission(this, Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    != PackageManager.PERMISSION_GRANTED) {
                ActivityCompat.requestPermissions(this, PERMISSIONS_STORAGE_OLD, PERMISSION_REQUEST_CODE);
            } else {
                loadFolders();
            }
        }
    }

    private void loadFolders() {
        new Thread(() -> {
            folders.clear();
            File[] files = getAppRootDirectory().listFiles();
            if (files != null) {
                for (File folder : files) {
                    if (folder.isDirectory()) {
                        // Add .nomedia to existing folders if not present
                        ensureNoMediaFile(folder);
                        folders.add(folder);
                    }
                }
                folders.sort((f1, f2) -> cleanName(f1.getName()).compareToIgnoreCase(cleanName(f2.getName())));
                runOnUiThread(() -> {
                    folderLayout.removeAllViews();
                    for (File folder : folders) {
                        addFolderView(folder);
                    }
                });
            }
        }).start();
    }

    private void ensureNoMediaFile(File folder) {
        File noMediaFile = new File(folder, ".nomedia");
        if (!noMediaFile.exists()) {
            try {
                noMediaFile.createNewFile();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void refreshMediaStore() {
        File appDir = getAppRootDirectory();
        // Scan the ImageX directory itself
        Intent mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
        Uri contentUri = Uri.fromFile(appDir);
        mediaScanIntent.setData(contentUri);
        sendBroadcast(mediaScanIntent);

        // Scan each folder inside the ImageX directory
        File[] files = appDir.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory() || file.isFile()) {
                    mediaScanIntent = new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE);
                    contentUri = Uri.fromFile(file);
                    mediaScanIntent.setData(contentUri);
                    sendBroadcast(mediaScanIntent);
                }
            }
        }
    }

    private void forceRescanAllFolders() {
        new Thread(() -> {
            File appDir = getAppRootDirectory();
            File[] files = appDir.listFiles();
            if (files != null) {
                for (File folder : files) {
                    if (folder.isDirectory()) {
                        ensureNoMediaFile(folder);
                    }
                }
            }
            runOnUiThread(this::refreshMediaStore);
        }).start();
    }

    // [Rest of the existing methods remain unchanged]
    private void requestManageStoragePermission() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Storage Permission Required")
                .setMessage("This app needs storage permission to manage folders. Please grant 'Allow management of all files' permission in the next screen.")
                .setPositiveButton("OK", (dialog, which) -> {
                    Intent intent = new Intent(Settings.ACTION_MANAGE_APP_ALL_FILES_ACCESS_PERMISSION);
                    Uri uri = Uri.fromParts("package", getPackageName(), null);
                    intent.setData(uri);
                    startActivityForResult(intent, MANAGE_STORAGE_PERMISSION_REQUEST_CODE);
                })
                .setNegativeButton("Cancel", (dialog, which) -> {
                    Toast.makeText(this, "Storage permission is required for the app to function", Toast.LENGTH_LONG).show();
                    finish();
                })
                .setCancelable(false)
                .show();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (requestCode == MANAGE_STORAGE_PERMISSION_REQUEST_CODE) {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                if (Environment.isExternalStorageManager()) {
                    loadFolders();
                } else {
                    Toast.makeText(this, "Storage permission denied", Toast.LENGTH_SHORT).show();
                    finish();
                }
            }
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                loadFolders();
            } else {
                Toast.makeText(this, "Storage permission denied", Toast.LENGTH_SHORT).show();
                finish();
            }
        }
    }

    private File getAppRootDirectory() {
        File picturesDir = Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES);
        File appDir = new File(picturesDir, APP_FOLDER_NAME);
        if (!appDir.exists()) {
            appDir.mkdirs();
        }
        return appDir;
    }

    private void createFolder() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Create Folder");

        final EditText input = new EditText(this);
        builder.setView(input);

        builder.setPositiveButton("Create", (dialog, which) -> {
            String folderName = input.getText().toString();
            createFolderInBackground(folderName);
        });

        builder.setNegativeButton("Cancel", (dialog, which) -> dialog.cancel());
        builder.show();
    }

    private void createFolderInBackground(String folderName) {
        new Thread(() -> {
            File folder = new File(getAppRootDirectory(), folderName);
            if (!folder.exists() && folder.mkdirs()) {
                ensureNoMediaFile(folder);

                folders.add(folder);
                runOnUiThread(() -> {
                    folders.sort((f1, f2) -> cleanName(f1.getName()).compareToIgnoreCase(cleanName(f2.getName())));
                    folderLayout.removeAllViews();
                    for (File sortedFolder : folders) {
                        addFolderView(sortedFolder);
                    }
                    Toast.makeText(MainActivity.this, "Folder created successfully", Toast.LENGTH_SHORT).show();
                });
            } else {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "Folder creation failed or already exists", Toast.LENGTH_SHORT).show();
                });
            }
        }).start();
    }

    private String cleanName(String name) {
        return name.replaceAll("[^a-zA-Z]", "");
    }

    private void addFolderView(File folder) {
        View folderView = getLayoutInflater().inflate(R.layout.folder_view, folderLayout, false);
        TextView folderNameTextView = folderView.findViewById(R.id.folderNameTextView);
        folderNameTextView.setText(folder.getName());

        ImageView folderImageView = folderView.findViewById(R.id.folderImageView);
        folderImageView.setImageResource(R.drawable.ic_folder);

        folderView.setTag(folder.getAbsolutePath());

        folderLayout.addView(folderView);

        final File folderCopy = folder;

        folderView.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, FolderActivity.class);
            intent.putExtra("folder_path", folderCopy.getAbsolutePath());
            startActivity(intent);
        });

        folderView.setOnLongClickListener(v -> {
            showFolderOptions(folderCopy);
            return true;
        });
    }

    private void showFolderOptions(File folder) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Folder Options");

        builder.setPositiveButton("Rename", (dialog, which) -> renameFolder(folder));
        builder.setNegativeButton("Delete", (dialog, which) -> deleteFolder(folder));
        builder.show();
    }

    private void renameFolder(File folder) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Rename Folder");

        final EditText input = new EditText(this);
        input.setText(folder.getName());
        builder.setView(input);

        builder.setPositiveButton("Rename", (dialog, which) -> {
            String newFolderName = input.getText().toString();
            renameFolderInBackground(folder, newFolderName);
        });

        builder.setNegativeButton("Cancel", (dialog, which) -> dialog.cancel());
        builder.show();
    }

    private void renameFolderInBackground(File folder, String newFolderName) {
        new Thread(() -> {
            File newFolder = new File(folder.getParent(), newFolderName);
            if (folder.renameTo(newFolder)) {
                runOnUiThread(() -> {
                    folders.set(folders.indexOf(folder), newFolder);
                    folders.sort((f1, f2) -> cleanName(f1.getName()).compareToIgnoreCase(cleanName(f2.getName())));
                    folderLayout.removeAllViews();
                    for (File sortedFolder : folders) {
                        addFolderView(sortedFolder);
                    }
                    Toast.makeText(MainActivity.this, "Folder renamed successfully", Toast.LENGTH_SHORT).show();
                });
            } else {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, "Rename failed", Toast.LENGTH_SHORT).show();
                });
            }
        }).start();
    }

    private void deleteFolder(File folder) {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("Confirm Deletion")
                .setMessage("Are you sure you want to delete this folder and all its contents?")
                .setPositiveButton("Yes", (dialog, which) -> {
                    new Thread(() -> {
                        boolean success;
                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                            success = deleteRecursiveModern(folder);
                        } else {
                            success = deleteFolderRecursively(folder);
                        }

                        final boolean finalSuccess = success;
                        runOnUiThread(() -> {
                            if (finalSuccess) {
                                folders.remove(folder);
                                folderLayout.removeAllViews();
                                for (File remainingFolder : folders) {
                                    addFolderView(remainingFolder);
                                }
                                Toast.makeText(MainActivity.this, "Folder deleted successfully", Toast.LENGTH_SHORT).show();
                            } else {
                                Toast.makeText(MainActivity.this, "Failed to delete folder", Toast.LENGTH_SHORT).show();
                            }
                        });
                    }).start();
                })
                .setNegativeButton("No", (dialog, which) -> dialog.dismiss())
                .show();
    }

    private boolean deleteRecursiveModern(File fileOrDirectory) {
        try {
            if (fileOrDirectory.isDirectory()) {
                File[] children = fileOrDirectory.listFiles();
                if (children != null) {
                    for (File child : children) {
                        deleteRecursiveModern(child);
                    }
                }
            }
            return fileOrDirectory.delete();
        } catch (SecurityException e) {
            e.printStackTrace();
            return false;
        }
    }

    private boolean deleteFolderRecursively(File folder) {
        try {
            if (folder.isDirectory()) {
                File[] files = folder.listFiles();
                if (files != null) {
                    for (File file : files) {
                        if (file.isDirectory()) {
                            deleteFolderRecursively(file);
                        } else {
                            file.delete();
                        }
                    }
                }
            }
            return folder.delete();
        } catch (SecurityException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void filterFolders(String query) {
        List<File> filteredFolders = new ArrayList<>();

        String normalizedQuery = query.replaceAll("[^a-zA-Z]", "").toLowerCase();

        if (normalizedQuery.isEmpty()) {
            filteredFolders.addAll(folders);
            noResultsTextView.setVisibility(View.GONE);
        } else {
            for (File folder : folders) {
                String normalizedFolderName = folder.getName().replaceAll("[^a-zA-Z]", "").toLowerCase();

                if (normalizedFolderName.contains(normalizedQuery)) {
                    filteredFolders.add(folder);
                }
            }

            if (filteredFolders.isEmpty()) {
                noResultsTextView.setVisibility(View.VISIBLE);
            } else {
                noResultsTextView.setVisibility(View.GONE);
            }
        }

        folderLayout.removeAllViews();
        for (File folder : filteredFolders) {
            addFolderView(folder);
        }
    }



    @Override
    protected void onDestroy() {
        super.onDestroy();
        btnCreateFolder.setOnClickListener(null);
        for (int i = 0; i < folderLayout.getChildCount(); i++) {
            View folderView = folderLayout.getChildAt(i);
            folderView.setOnClickListener(null);
            folderView.setOnLongClickListener(null);
        }
        folders.clear();
    }
}
