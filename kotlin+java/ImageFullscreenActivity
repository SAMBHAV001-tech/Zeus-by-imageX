package com.example.imagex;

import android.content.Context;
import android.os.Bundle;
import android.view.View;
import android.view.ViewGroup;
import androidx.appcompat.app.AppCompatActivity;
import androidx.viewpager2.widget.ViewPager2;
import androidx.recyclerview.widget.RecyclerView;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class ImageFullscreenActivity extends AppCompatActivity {

    private ViewPager2 viewPager;
    private ImagePagerAdapter adapter;
    private List<String> images;
    private ExecutorService executorService;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_image_fullscreen);

        viewPager = findViewById(R.id.viewPager);
        images = getIntent().getStringArrayListExtra("images");

        adapter = new ImagePagerAdapter(this, images);
        viewPager.setAdapter(adapter);
        viewPager.setCurrentItem(getIntent().getIntExtra("position", 0), false);

        hideSystemBars();

        viewPager.registerOnPageChangeCallback(new ViewPager2.OnPageChangeCallback() {
            @Override
            public void onPageSelected(int position) {
                updateSwipingState();
            }
        });

        executorService = Executors.newFixedThreadPool(3);
    }

    private void hideSystemBars() {
        View decorView = getWindow().getDecorView();
        int uiOptions = View.SYSTEM_UI_FLAG_FULLSCREEN
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;
        decorView.setSystemUiVisibility(uiOptions);
    }

    private void updateSwipingState() {
        ZoomableImageView currentImageView = (ZoomableImageView) viewPager.findViewWithTag(viewPager.getCurrentItem());
        if (currentImageView != null) {
            viewPager.setUserInputEnabled(!currentImageView.isZoomedIn());
        }
    }

    private class ImagePagerAdapter extends RecyclerView.Adapter<ImagePagerAdapter.ImageViewHolder> {
        private Context context;
        private List<String> imagePaths;

        ImagePagerAdapter(Context context, List<String> imagePaths) {
            this.context = context;
            this.imagePaths = imagePaths;
        }

        @Override
        public ImageViewHolder onCreateViewHolder(ViewGroup parent, int viewType) {
            ZoomableImageView zoomableImageView = new ZoomableImageView(context);
            zoomableImageView.setLayoutParams(new ViewGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT,
                    ViewGroup.LayoutParams.MATCH_PARENT));
            return new ImageViewHolder(zoomableImageView);
        }

        @Override
        public void onBindViewHolder(ImageViewHolder holder, int position) {
            String imagePath = imagePaths.get(position);
            holder.zoomableImageView.setTag(position);

            // Call setImage() method to load and display the image
            holder.zoomableImageView.setImage(imagePath);

            holder.zoomableImageView.setOnTouchListener((v, event) -> {
                updateSwipingState();
                return false;
            });
        }

        @Override
        public int getItemCount() {
            return imagePaths.size();
        }

        class ImageViewHolder extends RecyclerView.ViewHolder {
            ZoomableImageView zoomableImageView;

            ImageViewHolder(View itemView) {
                super(itemView);
                zoomableImageView = (ZoomableImageView) itemView;
            }
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        viewPager.setAdapter(null);
        adapter = null;
        executorService.shutdownNow();
    }
}
