package com.example.imagex;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.util.Log;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AlertDialog;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.DiskCacheStrategy;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class FolderActivity extends AppCompatActivity {

    private static final String TAG = "FolderActivity";
    private static final int REQUEST_CODE_PERMISSIONS = 100;
    private static final int PICK_SINGLE_IMAGE = 2;
    private static final int PICK_MULTIPLE_IMAGES = 1;

    private LinearLayout imageLayout;
    private final List<String> imagePaths = new ArrayList<>();
    private ExecutorService executorService;
    private TextView folderNameTextView;
    private String folderPath;



    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_folder);

        imageLayout = findViewById(R.id.imageLayout);
        folderNameTextView = findViewById(R.id.folderNameTextView);
        Button btnAddImage = findViewById(R.id.btnAddImage);

        executorService = Executors.newFixedThreadPool(4);
        folderPath = getIntent().getStringExtra("folder_path");

        File folder = new File(folderPath);
        folderNameTextView.setText(folder.getName());

        checkPermissions();

        btnAddImage.setOnLongClickListener(v -> {
            Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction(Intent.ACTION_GET_CONTENT);
            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true);
            startActivityForResult(Intent.createChooser(intent, "Select Multiple Pictures"), PICK_MULTIPLE_IMAGES);
            return true;
        });

        btnAddImage.setOnClickListener(v -> {
            Intent intent = new Intent();
            intent.setType("image/*");
            intent.setAction(Intent.ACTION_GET_CONTENT);
            startActivityForResult(Intent.createChooser(intent, "Select Picture"), PICK_SINGLE_IMAGE);
        });

        loadImages();
    }

    private void checkPermissions() {
        String[] permissions = {
                Manifest.permission.READ_EXTERNAL_STORAGE,
                Manifest.permission.WRITE_EXTERNAL_STORAGE
        };

        boolean allPermissionsGranted = true;
        for (String permission : permissions) {
            if (ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED) {
                allPermissionsGranted = false;
                break;
            }
        }

        if (!allPermissionsGranted) {
            ActivityCompat.requestPermissions(this, permissions, REQUEST_CODE_PERMISSIONS);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == REQUEST_CODE_PERMISSIONS) {
            boolean allGranted = true;
            for (int result : grantResults) {
                if (result != PackageManager.PERMISSION_GRANTED) {
                    allGranted = false;
                    break;
                }
            }
            if (allGranted) {
                loadImages();
            } else {
                Toast.makeText(this, "Permissions are required to manage images", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (resultCode == RESULT_OK && data != null) {
            if (requestCode == PICK_SINGLE_IMAGE) {
                Uri imageUri = data.getData();
                if (imageUri != null) {
                    processImageUri(imageUri);
                }
            } else if (requestCode == PICK_MULTIPLE_IMAGES) {
                if (data.getClipData() != null) {
                    int count = data.getClipData().getItemCount();
                    for (int i = 0; i < count; i++) {
                        Uri imageUri = data.getClipData ().getItemAt(i).getUri();
                        processImageUri(imageUri);
                    }
                } else if (data.getData() != null) {
                    processImageUri(data.getData());
                }
            }
        }
    }

    private void processImageUri(Uri uri) {
        executorService.execute(() -> {
            try {
                // Get original file name
                String fileName = getFileName(uri);
                if (fileName == null) {
                    fileName = System.currentTimeMillis() + ".jpg";
                }

                // Create a temporary file to store the image
                File tempFile = new File(folderPath, fileName);
                copyUriToFile(uri, tempFile);

                // Now optimize and resize the image
                Bitmap resizedBitmap = optimizeAndResizeImage(tempFile.getAbsolutePath(), 2000, 1200);
                if (resizedBitmap != null) {
                    String resizedImagePath = saveResizedImage(resizedBitmap, fileName);
                    if (resizedImagePath != null) {
                        runOnUiThread(() -> {
                            imagePaths.add(resizedImagePath);
                            displayImage(resizedImagePath);
                            Toast.makeText(this, "Image added successfully", Toast.LENGTH_SHORT).show();
                        });
                        // Delete the original image
                        tempFile.delete();
                    }
                    resizedBitmap.recycle();
                }
            } catch (Exception e) {
                Log.e(TAG, "Error processing image", e);
                runOnUiThread(() -> Toast.makeText(this, "Failed to process image", Toast.LENGTH_SHORT).show());
            }
        });
    }

    private String getFileName(Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) {
                if (cursor != null && cursor.moveToFirst()) {
                    int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME);
                    if (nameIndex >= 0) {
                        result = cursor.getString(nameIndex);
                    }
                }
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }

    private void copyUriToFile(Uri uri, File destFile) throws IOException {
        try (InputStream inputStream = getContentResolver().openInputStream(uri);
             FileOutputStream outputStream = new FileOutputStream(destFile)) {
            if (inputStream == null) throw new IOException("Failed to open input stream");

            byte[] buffer = new byte[4096];
            int read;
            while ((read = inputStream.read(buffer)) != -1) {
                outputStream.write(buffer, 0, read);
            }
            outputStream.flush();
        }
    }

    private Bitmap optimizeAndResizeImage(String imagePath, int targetWidth, int targetHeight) {
        BitmapFactory.Options options = new BitmapFactory.Options();
        options.inJustDecodeBounds = true;
        BitmapFactory.decodeFile(imagePath, options);

        options.inSampleSize = calculateInSampleSize(options, targetWidth, targetHeight);
        options.inJustDecodeBounds = false;

        Bitmap sampledBitmap = BitmapFactory.decodeFile(imagePath, options);
        if (sampledBitmap == null) return null;

        return Bitmap.createScaledBitmap(sampledBitmap, targetWidth, targetHeight, true);
    }

    private String saveResizedImage(Bitmap bitmap, String originalFileName) {
        try {
            String fileName = "resized_" + originalFileName;
            File imageFile = new File(folderPath, fileName);
            FileOutputStream outputStream = new FileOutputStream(imageFile);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 80, outputStream);
            outputStream.flush();
            outputStream.close();
            return imageFile.getAbsolutePath();
        } catch (IOException e) {
            Log.e(TAG, "Failed to save resized image", e);
            return null;
        }
    }

    private int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        final int height = options.outHeight;
        final int width = options.outWidth;
        int inSampleSize = 1;

        if (height > reqHeight || width > reqWidth) {
            final int halfHeight = height / 2;
            final int halfWidth = width / 2;

            while ((halfHeight / inSampleSize) >= reqHeight && (halfWidth / inSampleSize) >= reqWidth) {
                inSampleSize *= 2;
            }
        }
        return inSampleSize;
    }

    private void loadImages() {
        imageLayout.removeAllViews();
        imagePaths.clear();

        executorService.execute(() -> {
            File folder = new File(folderPath);
            File[] images = folder.listFiles((dir, name) ->
                    name.toLowerCase().endsWith(".jpg") ||
                            name.toLowerCase().endsWith(".jpeg") ||
                            name.toLowerCase().endsWith(".png") &&
                                    name.startsWith("resized_")
            );
            if (images != null) {
                for (File image : images) {
                    imagePaths.add (image.getAbsolutePath());
                    runOnUiThread(() -> displayImage(image.getAbsolutePath()));
                }
            }
        });
    }

    private void displayImage(String imagePath) {
        ImageView imageView = new ImageView(this);
        LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(200, 200);
        imageView.setLayoutParams(layoutParams);

        Glide.with(this)
                .load(imagePath)
                .diskCacheStrategy(DiskCacheStrategy.ALL)
                .into(imageView);

        imageLayout.addView(imageView);

        imageView.setOnClickListener(v -> {
            int position = imagePaths.indexOf(imagePath);
            navigateToImageFullscreen(imagePaths, position);
        });

        imageView.setOnLongClickListener(v -> {
            showDeleteConfirmationDialog(imagePath);
            return true;
        });
    }

    private void showDeleteConfirmationDialog(String imagePath) {
        new AlertDialog.Builder(this)
                .setTitle("Delete Image")
                .setMessage("Are you sure you want to delete this image?")
                .setPositiveButton("Yes", (dialog, which) -> deleteImage(imagePath))
                .setNegativeButton("No", null)
                .show();
    }

    private void deleteImage(String imagePath) {
        File imageFile = new File(imagePath);
        if (imageFile.delete()) {
            imagePaths.remove(imagePath);
            loadImages();
            Toast.makeText(this, "Image deleted successfully", Toast.LENGTH_SHORT).show();
        } else {
            Toast.makeText(this, "Failed to delete image", Toast.LENGTH_SHORT).show();
        }
    }

    private void navigateToImageFullscreen(List<String> imagePaths, int position) {
        Intent intent = new Intent(FolderActivity.this, ImageFullscreenActivity.class);
        intent.putStringArrayListExtra("images", new ArrayList<>(imagePaths));
        intent.putExtra("position", position);
        startActivity(intent);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (executorService != null && !executorService.isShutdown()) {
            executorService.shutdown();
        }
    }
}
